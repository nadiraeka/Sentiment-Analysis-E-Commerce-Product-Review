# -*- coding: utf-8 -*-
"""Nadira Eka Rahmaharva_2206051525_UTS Analisis Data Tidak Terstruktur

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n7-yFIilSEyElwnmP-xDewEj5gULg2zI

# **Sentimen Analisis Produk Review E-Commerce**

# Import Library
"""

!pip install transformers

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# tokenizer
import nltk
from nltk.tokenize import word_tokenize
nltk.download('stopwords')
nltk.download('punkt_tab')
from nltk.corpus import stopwords
import string

from wordcloud import WordCloud
from plotly import graph_objs as go
import plotly.express as px
import plotly.figure_factory as ff
from collections import Counter

# Model
from sklearn.model_selection import train_test_split
from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments
from sklearn.metrics import classification_report

"""# Import Data"""

!gdown 18pZrFW-pBr6k7WJn8oPbtgQKjD13g4Sg

df = pd.read_csv('/content/labeledReview.datasetFix.csv')
df.head()

df = df.loc[:, ['translate', 'sentimen']]

# Menghapus baris dengan kolom content null dan menghapus duplikasi
df = df.dropna(subset=['translate']).drop_duplicates()

# Mengubah nama kolom translate jd review
df = df.rename(columns={'translate': 'review'})

"""# EDA

## WordCloud
"""

df_positif = df[df['sentimen'] == 1]
all_words_positif = ' '.join([twts for twts in df_positif['review']])
wordcloud_positif = WordCloud(width=500, height=300, random_state=21, max_font_size=110).generate(all_words_positif)

plt.imshow(wordcloud_positif, interpolation="bilinear")
# plt.axis('off')
plt.title('Word Cloud dari Sentimen Positif')
plt.show()

df_negatif = df[df['sentimen'] == 0]
all_words_negatif = ' '.join([twts for twts in df_negatif['review']])
wordcloud_negatif = WordCloud(width=500, height=300, random_state=21, max_font_size=110).generate(all_words_negatif)

plt.imshow(wordcloud_negatif, interpolation="bilinear")
# plt.axis('off')
plt.title('Word Cloud dari Sentimen Negatif')
plt.show()

"""## Distribusi Target"""

temp = df.groupby('sentimen').count()['review'].reset_index()
temp['sentimen'] = temp['sentimen'].map({0: 'Negatif', 1: 'Positif'})
temp = temp.sort_values(by='review', ascending=False)
temp.style.background_gradient(cmap='inferno_r')

plt.figure(figsize=(8,6))
plt.pie(temp['review'], labels= temp['sentimen'], autopct='%1.2f%%', startangle=140)
plt.title('Perbandingan banyaknya data komentar positif dan negatif')
plt.show()

from os import replace
# Menghapus stopwords, mengubah huruf menjadi kecil, dan tokenisasi
stop_words = stopwords.words('english')
df['review'] = df['review'].apply(lambda x: [word.lower() for word in word_tokenize(x) if (word.isalpha() and word.lower() not in stop_words)])

# Normalisasi teks
df['review'] = df['review'].apply(lambda x: ' '.join(x))

df.head()

"""# Modelling"""

X = df['review']
y = df['sentimen']

# Split dataset
X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.2, random_state=25, stratify=y
)

X_val, X_test, y_val, y_test = train_test_split(
    X_val, y_val, test_size=0.5, random_state=25, stratify=y_val
)

print(f"Training set size: {X_train.shape[0]}")
print(f"Validation set size: {X_val.shape[0]}")
print(f"Testing set size: {X_test.shape[0]}")

# Inisialisasi tokenizer
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

# Tokenisasi data
def tokenize_function(texts):
    return tokenizer(
        texts.tolist(),
        padding=True,
        truncation=True,
        max_length=128
    )

train_encodings = tokenize_function(X_train)
val_encodings = tokenize_function(X_val)
test_encodings = tokenize_function(X_test)

import torch
from torch.utils.data import Dataset

class ReviewsDataset(Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __len__(self):
        return len(self.labels)

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

train_dataset = ReviewsDataset(train_encodings, y_train.tolist())
val_dataset = ReviewsDataset(val_encodings, y_val.tolist())
test_dataset = ReviewsDataset(test_encodings, y_test.tolist())

# Inisialisasi model
model = BertForSequenceClassification.from_pretrained(
    'bert-base-uncased',
    num_labels=2,  # Negatif dan Positif
    output_attentions=False,
    output_hidden_states=False
)

# Pendefinisian training arguments
training_args = TrainingArguments(
    output_dir='./results',
    num_train_epochs=3,              # Jumlah training epochs
    per_device_train_batch_size=16,  # Ukuran batch untuk training
    per_device_eval_batch_size=64,   # Ukuran batch untuk evaluasi
    warmup_steps=500,
    weight_decay=0.01,
    logging_dir='./logs',
    logging_steps=10,
    load_best_model_at_end=True,
    metric_for_best_model='accuracy',
    eval_strategy='epoch',
    save_strategy='epoch'
)

# Pendefinisian komputasi metrik
import numpy as np
from sklearn.metrics import accuracy_score, precision_recall_fscore_support

def compute_metrics(pred):
    labels = pred.label_ids
    preds = np.argmax(pred.predictions, axis=1)
    precision, recall, f1, _ = precision_recall_fscore_support(labels, preds, average='weighted')
    acc = accuracy_score(labels, preds)
    return {
        'accuracy': acc,
        'f1': f1,
        'precision': precision,
        'recall': recall
    }

# Inisialisasi trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
    compute_metrics=compute_metrics
)

# Train model
trainer.train()

import matplotlib.colors as mcolors
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

# Prediksi
predictions, true_labels, _ = trainer.predict(test_dataset)
preds = np.argmax(predictions, axis=1)

print("Classification Report:")
print(classification_report(y_test, preds, target_names=['Negatif', 'Positif']))

# Confusion Matrix
cm = confusion_matrix(y_test, preds)
plt.figure(figsize=(6, 4))

cmap = mcolors.ListedColormap(['#ffffff', '#85df6d', '#3cb371', '#006400'])  # White to light green to dark green

sns.heatmap(cm, annot=True, fmt='d', cmap=cmap,
            xticklabels=['Negatif', 'Positif'],
            yticklabels=['Negatif', 'Positif'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Akurasi
accuracy = accuracy_score(y_test, preds)
print(f"Accuracy: {accuracy * 100:.2f}%")